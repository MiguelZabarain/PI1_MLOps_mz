---------------------------------
Como crear soluciones con FastAPI - https://www.youtube.com/watch?v=12NIB_RjxMo
---------------------------------
Desde la consola Gitbash o la terminal de VSC:

1) Crea el entorno virtual: 
python -m venv my_venv

2) Activa el venv: 
source my_venv/Scripts/activate

3) Crea el archivo .gitignore
touch .gitignore

4) Edita .gitignore para agregar el entorno virtual y así quede excluido del repositorio GIT:
my_venv
/my_venv
my_venv/
/my_venv/

5) Estando dentro del entorno virtual (my_venv) realiza la instalacion de las librerías requeridas por el código en main.py:
pip install fastapi uvicorn pandas scikit-learn pyarrow fastparquet

6) Crea un archivo 'main.py' que contenga la solución software desarrollada -tan simple como desarrollar funciones, o tan compleja como quieras.
La estructura del contenido de main.py debe ser:
  from fastapi import FastAPI
  app = FastAPI()

  # End-point 1
  @app.get("/PlayTimeGenre/{genero}")
  def PlayTimeGenre(genero: str):
  ...

7) Levanta el servidor web uvicorn y ejecuta la solución software creada con FastAPI con alguna de las siguientes líneas:
uvicorn main:app --reload                  <---Con la opción --reload, evitas bajar y subir el servidor cada que hagas modificaciones en main.py
uvicorn main:app --reload > output.txt     <---Enviando los prints al archivo 'output.txt' -la opción con '>>' no sobre-escribe el archivo, le hace un append.
uvicorn main:app --port 10000 --reload     <---Especificando el puerto 

8) Desde un web-browser llama la solución y prueba los endpoints:
http://localhost:8000/docs                 -Intenta tambien la versión de OpenAPI a ver que ocurre... http://127.0.0.1:8000/redoc

9) Cuando todo funcione OK, es tiempo de crear una lista de las dependencias al mismo nivel del 'venv' -la ubicación raiz del repo local:
pip freeze > requirements.txt

10) Si lo estimas conveniente, crea el repo local con Git -si aún no lo tienes- y subelo al repo público en GitHub.
------------
































Como crear soluciones de datos usando un ambiente virtual, control de versiones con GIT, y FastAPI.
Desde la consola Gitbash o la terminal de VSC...

0. Crea un repositorio GIT en la carpeta local que contendrá el proyecto:
git init

1. Crea el entorno virtual (my_venv):
python -m venv my_venv

2. Activa el entorno virtual:
source my_venv/Scripts/activate

3. Crea el archivo .gitignore
touch .gitignore

4. Edita .gitignore para agregar el entorno virtual y así quede excluido del repositorio GIT:
my_venv
/my_venv
my_venv/
/my_venv/

5. Con el entorno virtual activo, instala las librerías requeridas por el código en main.py:
pip install fastapi uvicorn pandas scikit-learn pyarrow fastparquet

6. Asegurate que el archivo 'main.py' que contiene la API desarrollada, se encuentra al mismo nivel de las carpetas 'my_venv' y .git.
La estructura del contenido de main.py debe ser:

from fastapi import FastAPI
app = FastAPI()

A continuación el endpoint...
@app.get("/PlayTimeGenre/{genero}")
def PlayTimeGenre(genero: str):
...

7. Ejecuta y prueba tu solución software creada con FastAPI. Para ello, levanta el servidor uvicorn que aloja la API, usando alguna de las siguientes líneas desde la ventana Git Bash:
uvicorn main:app --reload
uvicorn main:app --reload > output.txt
uvicorn main:app --port 10000 --reload

8. Ahora puedes probar cada uno de los endpoints que creaste en tu API; para ello, deja momentaneamente la ventana Git Bash, para abrir un web browser usando la URL 
'localhost:8000/docs'.

9. Cuando todo funcione OK, es tiempo de volver a la ventana Git Bash para crear un archivo 'requirements.txt' al mismo nivel de las carpetas 'my_venv' y .git:
pip freeze > requirements.txt

10. Si lo estimas conveniente, sube el repositorio local al repo público en GitHub.

El siguiente enlace da acceso a un video donde se explica en detalle como implementar soluciones con FastAPI:
https://www.youtube.com/watch?v=12NIB_RjxMo























